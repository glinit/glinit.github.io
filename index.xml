<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>glinit</title>
    <link>https://glinit.github.io/</link>
    <description>Recent content on glinit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 15 Mar 2020 23:22:42 +0800</lastBuildDate>
    
	<atom:link href="https://glinit.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NLP入门（一）词袋模型及句子相似度</title>
      <link>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%B8%80%E8%AF%8D%E8%A2%8B%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8F%A5%E5%AD%90%E7%9B%B8%E4%BC%BC%E5%BA%A6/</link>
      <pubDate>Mon, 05 Oct 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%B8%80%E8%AF%8D%E8%A2%8B%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%8F%A5%E5%AD%90%E7%9B%B8%E4%BC%BC%E5%BA%A6/</guid>
      <description>本文将会介绍NLP中常见的词袋模型（Bag of Words）以及如何利用词袋模型来计算句子间的相似度（余弦相似度，cosine similarit</description>
    </item>
    
    <item>
      <title>NLP入门（三）词形还原（Lemmatization)</title>
      <link>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%B8%89%E8%AF%8D%E5%BD%A2%E8%BF%98%E5%8E%9FLemmatization/</link>
      <pubDate>Tue, 08 Sep 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%B8%89%E8%AF%8D%E5%BD%A2%E8%BF%98%E5%8E%9FLemmatization/</guid>
      <description>词形还原（Lemmatization）是文本预处理中的重要部分，与词干提取（stemming）很相似。 简单说来，词形还原就是去掉单词的词缀，</description>
    </item>
    
    <item>
      <title>NLP入门（二）探究TF-IDF的原理</title>
      <link>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%BA%8C%E6%8E%A2%E7%A9%B6TF-IDF%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 08 Sep 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%BA%8C%E6%8E%A2%E7%A9%B6TF-IDF%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <description>TF-IDF介绍 TF-IDF是NLP中一种常用的统计方法，用以评估一个字词对于一个文件集或一个语料库中的其中一份文件的重要程度，通常用于提取</description>
    </item>
    
    <item>
      <title>NLP入门（五）用深度学习实现命名实体识别（NER）</title>
      <link>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%BA%94%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/</link>
      <pubDate>Tue, 08 Sep 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E4%BA%94%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E7%8E%B0%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/</guid>
      <description>在本文中，我们将会学习到如何使用深度学习工具来自己一步步地实现NER，只要你坚持看完，就一定会很有收获的。 几乎所有的NLP都依赖一个强大的语</description>
    </item>
    
    <item>
      <title>NLP入门（四）命名实体识别（NER）</title>
      <link>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E5%9B%9B%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/</link>
      <pubDate>Tue, 08 Sep 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/nlp/NLP%E5%85%A5%E9%97%A8%E5%9B%9B%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%ABNER/</guid>
      <description>本文将会简单介绍自然语言处理（NLP）中的命名实体识别（NER）。 命名实体识别（Named Entity Recognition，简称NER）是信息提取、</description>
    </item>
    
    <item>
      <title>word2vec训练中文模型—wiki百科中文库</title>
      <link>https://glinit.github.io/post/nlp/word2vec%E8%AE%AD%E7%BB%83%E4%B8%AD%E6%96%87%E6%A8%A1%E5%9E%8Bwiki%E7%99%BE%E7%A7%91%E4%B8%AD%E6%96%87%E5%BA%93/</link>
      <pubDate>Tue, 08 Sep 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/nlp/word2vec%E8%AE%AD%E7%BB%83%E4%B8%AD%E6%96%87%E6%A8%A1%E5%9E%8Bwiki%E7%99%BE%E7%A7%91%E4%B8%AD%E6%96%87%E5%BA%93/</guid>
      <description>词向量作为文本的基本结构——词的模型。良好的词向量可以达到语义相近的词在词向量空间里聚集在一起，这对后续的文本分类，文本聚类等等操作提供了便</description>
    </item>
    
    <item>
      <title>关于编辑距离的应用方案--单词或专属名词拼写检查算法</title>
      <link>https://glinit.github.io/post/nlp/%E5%8D%95%E8%AF%8D%E6%88%96%E4%B8%93%E5%B1%9E%E5%90%8D%E8%AF%8D%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 08 Sep 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/nlp/%E5%8D%95%E8%AF%8D%E6%88%96%E4%B8%93%E5%B1%9E%E5%90%8D%E8%AF%8D%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5%E7%AE%97%E6%B3%95/</guid>
      <description>最近在做楼盘搜索的时候遇到一个问题，用户在查询楼盘的时候回出现楼盘名称输入有误的情况，一般会出现一个或多个错字，其中同义词可以根据词典和拼音</description>
    </item>
    
    <item>
      <title>钉钉预警与代码实现</title>
      <link>https://glinit.github.io/post/tools/%E9%92%89%E9%92%89%E9%A2%84%E8%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 08 Sep 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/tools/%E9%92%89%E9%92%89%E9%A2%84%E8%AD%A6%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</guid>
      <description>​ 本文档对自定义钉钉机器人的流程与注意事项做一个简单介绍，没有知识点，作为一个日常笔记，储备一些小工具。 一、获取自定义机器人webhook 步</description>
    </item>
    
    <item>
      <title>Flink基础2-Data Source介绍</title>
      <link>https://glinit.github.io/post/flink/Flink%E5%9F%BA%E7%A1%802-Data-Source%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 30 Aug 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/flink/Flink%E5%9F%BA%E7%A1%802-Data-Source%E4%BB%8B%E7%BB%8D/</guid>
      <description>前言 Data Sources 是什么呢？就字面意思其实就可以知道：数据来源。 Flink 做为一款流式计算框架，它可用来做批处理，即处理静态的数据集、历史的数据集；也可以用来</description>
    </item>
    
    <item>
      <title>Spark核心算子</title>
      <link>https://glinit.github.io/post/java/Spark%E6%A0%B8%E5%BF%83%E7%AE%97%E5%AD%90/</link>
      <pubDate>Tue, 11 Aug 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/java/Spark%E6%A0%B8%E5%BF%83%E7%AE%97%E5%AD%90/</guid>
      <description>Spark RDD： Transformation Meaning map(func) 返回一个新的分布式数据集，该数据集是通过将源的每个元素传递给函数func处理形成的。 filter(func) 返回一个新的数据集，该数据集是通过fu</description>
    </item>
    
    <item>
      <title>SQL开发规范与优化规则</title>
      <link>https://glinit.github.io/post/sql/SQL%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%B8%8E%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99/</link>
      <pubDate>Tue, 11 Aug 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/sql/SQL%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%B8%8E%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%99/</guid>
      <description>​ 本文档说明优化技术主要考虑大数据环境SQL on Hadoop解决方案下的优化规则及开发规范，已尽力刨除RDBMS优化细节，且尽量不加杂关系代数</description>
    </item>
    
    <item>
      <title>SQL开发规范与优化规则</title>
      <link>https://glinit.github.io/post/sql/SQL%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%B8%8E%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%992/</link>
      <pubDate>Tue, 11 Aug 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/sql/SQL%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%B8%8E%E4%BC%98%E5%8C%96%E8%A7%84%E5%88%992/</guid>
      <description>​ 本文档说明优化技术主要考虑大数据环境SQL on Hadoop解决方案下的优化规则及开发规范，已尽力刨除RDBMS优化细节，且尽量不加杂关系代数</description>
    </item>
    
    <item>
      <title>基于PGSQL左连接SQL执行计划解析</title>
      <link>https://glinit.github.io/post/sql/%E5%9F%BA%E4%BA%8EPGSQL%E5%B7%A6%E8%BF%9E%E6%8E%A5SQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 11 Aug 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/sql/%E5%9F%BA%E4%BA%8EPGSQL%E5%B7%A6%E8%BF%9E%E6%8E%A5SQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%A7%A3%E6%9E%90/</guid>
      <description>一 示例数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 -- table employee drop table if exists employee; create table employee( empno int, ename VARCHAR(10), job VARCHAR(9), mgr int, hiredate DATE, sal decimal(7,2), comm decimal(7,2), deptno int ) ; insert into employee (empno, ename,</description>
    </item>
    
    <item>
      <title>增量ETL (长周期指标) 优化方案</title>
      <link>https://glinit.github.io/post/dw/%E5%A2%9E%E9%87%8FETL-%E9%95%BF%E5%91%A8%E6%9C%9F%E6%8C%87%E6%A0%87-%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 11 Aug 2020 01:37:56 +0800</pubDate>
      
      <guid>https://glinit.github.io/post/dw/%E5%A2%9E%E9%87%8FETL-%E9%95%BF%E5%91%A8%E6%9C%9F%E6%8C%87%E6%A0%87-%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</guid>
      <description>​ 在日常数据处理过程中避免不了要计算跨长周期数据指标统计需求，常见三种场景抽象如下： pv类： 统计每个城市(过去30天)用户浏览次数； 统计每个</description>
    </item>
    
    <item>
      <title>Github</title>
      <link>https://glinit.github.io/github/</link>
      <pubDate>Sun, 15 Mar 2020 23:22:42 +0800</pubDate>
      
      <guid>https://glinit.github.io/github/</guid>
      <description>Github Projects </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://glinit.github.io/about/</link>
      <pubDate>Sun, 15 Mar 2020 22:25:24 +0800</pubDate>
      
      <guid>https://glinit.github.io/about/</guid>
      <description>​ 深耕于数据领域，具备7年IT从业经验，先后任职多家互联网企业，从事数据架构及DBA相关工作经验，从开发到运维-技术栈丰富，对数据建模、实时</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://glinit.github.io/resume/</link>
      <pubDate>Sun, 15 Mar 2020 12:08:58 +0800</pubDate>
      
      <guid>https://glinit.github.io/resume/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>